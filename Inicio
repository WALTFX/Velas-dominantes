// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// © Waltfx

//@version=5
indicator("WALTFX", "Velas alcistas con cuepro mayor", true, max_lines_count=500, max_labels_count=500, max_boxes_count=500, max_bars_back=500)

//------------------------------------------------------------------------------
// Settings
//------------------------------------------------------------------------------
disp    = display.all - display.status_line

kzGR    = 'Killzones'
asSH    = input(true, '', inline='asia', group=kzGR)
asST    = input.string('Asian', '', inline='asia', group=kzGR, display=disp)
asS     = input.session('2000-0000', '', inline='asia', group=kzGR, display=disp)
asC     = input.color(color.new(#e91e63, 90), '', inline='asia', group=kzGR)

ldnOSH  = input(true, '', inline='ldno', group=kzGR)
ldnOST  = input.string('London', '', inline='ldno', group=kzGR, display=disp)
ldnOS   = input.session('0200-0500', '', inline='ldno', group=kzGR, display=disp)
ldnOC   = input.color(color.new(#00bcd4, 90), '', inline='ldno', group=kzGR)

nySH    = input(true, '', inline='nyam', group=kzGR)
nyST    = input.string('New York AM', '', inline='nyam', group=kzGR, display=disp)
nyS     = input.session('0830-1100', '', inline='nyam', group=kzGR, display=disp)
nyC     = input.color(color.new(#ff5d00, 90), '', inline='nyam', group=kzGR)

ldnCSH  = input(true, '', inline='nypm', group=kzGR)
ldnCST  = input.string('New York PM', '', inline='nypm', group=kzGR, display=disp)
ldnCS   = input.session('1330-1600', '', inline='nypm', group=kzGR, display=disp)
ldnCC   = input.color(color.new(#2157f3, 90), '', inline='nypm', group=kzGR)

kzMML   = input(true, 'Killzone Lines : Top/Bottom', inline='LN', group=kzGR)
kzML    = input(false, 'Mean', inline='LN', group=kzGR)
kzLE    = input(true, 'Extend Top/Bottom', inline='LN', group=kzGR)
kzLB    = input(true, 'Killzone Labels', group=kzGR)
kzSH    = input.int(15, 'Display Killzones within Timeframes Up To', options=[1, 3, 5, 15, 30, 45, 60], group=kzGR, display=disp)
dwmO    = input.string('None', 'Open Price of', options=['Killzones','the Day','the Week','the Month','None'], inline='OP', group=kzGR, display=disp)
dwmS    = input.bool(true, 'Separator', inline='OP', group=kzGR)
dwmC    = input(color.new(color.gray, 89), '', inline='OP', group=kzGR)
dwmL    = input.bool(true, 'Label', inline='OP', group=kzGR)

//-----------------------------------------------------------------------------
// Inputs para el filtro de sesión "OPENING"
//-----------------------------------------------------------------------------
applyOpenFilter = input.bool(true, "Aplicar filtro OPENING", group="Sessions", inline="OPEN")
openSession     = input.session("0830-0850", "Opening Session", group="Sessions", inline="OPEN")
isOpenSession   = applyOpenFilter ? not na(time(timeframe.period, openSession, "UTC-5")) : true

//------------------------------------------------------------------------------
// User Defined Types
//------------------------------------------------------------------------------
type bar
    float o = open
    float h = high
    float l = low
    float c = close
    int   t = time
    int   i = bar_index

type swing
    float y = na
    int   i = na
    bool  x = false

type pivotPoint
    float  h
    int    hi
    bool   hx 
    float  l
    int    li
    bool   lx

type KZ
    line  lnT
    line  lnM
    line  lnB
    line  lnO
    label lb
    label lbO

type DWM
    line  ln
    label lb

//------------------------------------------------------------------------------
// Variables
//------------------------------------------------------------------------------
bar b   = bar.new()
tfM   = timeframe.multiplier

nyam  = not na(time(timeframe.period, nyS, 'UTC-4')) and nySH and tfM <= kzSH
ldnO  = not na(time(timeframe.period, ldnOS, 'UTC-4')) and ldnOSH and tfM <= kzSH
ldnC  = not na(time(timeframe.period, ldnCS, 'UTC-4')) and ldnCSH and tfM <= kzSH
asian = not na(time(timeframe.period, asS, 'UTC-4')) and asSH and tfM <= kzSH

inKZ  = nyam or ldnO or ldnC or asian
var KZ kz = KZ.new()
var DWM dwm = DWM.new()

//------------------------------------------------------------------------------
// Functions / Methods
//------------------------------------------------------------------------------
swings(_l)=>
    var os = 0
    var swing top = swing.new(na, na)
    var swing btm = swing.new(na, na)
    upper = ta.highest(_l)
    lower = ta.lowest(_l)
    os := high[_l] > upper ? 0 : low[_l] < lower ? 1 : os
    if os == 0 and os[1] != 0
        top := swing.new(high[_l], bar_index[_l])
    if os == 1 and os[1] != 1
        btm := swing.new(low[_l], bar_index[_l])
    [top, btm]

method killzones(KZ _id, _s, _kz, _o, _h, _l, _c, _t, _cr, _tx, _mml, _ml, _lb, _le, _ol, _olC, _olL, areaCss)=>
    var float max = na, var float mid = na, var float min = na 
    var int sbT = na, var bool xt = na, var bool xb = na
    var box area = na
    var tC = color.rgb(color.r(_cr), color.g(_cr), color.b(_cr))
    if _s and not _s[1]
        max := _h
        sbT := _t
        min := _l
        mid := math.avg(max, min)
        area := box.new(bar_index, max, bar_index, min, na, bgcolor=areaCss)
        if _mml
            _id.lnT := line.new(sbT, max, sbT, max, xloc.bar_time, color=tC)
            _id.lnB := line.new(sbT, min, sbT, min, xloc.bar_time, color=tC)
        if _ml
            _id.lnM := line.new(sbT, mid, sbT, mid, xloc.bar_time, color=tC, style=line.style_dotted)
        if _ol
            _id.lnO := line.new(sbT, _o, sbT, _o, xloc.bar_time, color=color.new(_olC, 0), style=line.style_dotted)
            if _olL
                _id.lbO := label.new(sbT, _o, "KZO(" + str.tostring(_o, format.mintick) + ")", xloc.bar_time, color=color(na), style=label.style_label_left, textcolor=color.new(_olC, 0), size=size.tiny)
        if _lb
            _id.lb := label.new(sbT, max, _tx, xloc.bar_time, color=#ffffff00, style=label.style_label_down, textcolor=tC, size=size.small)
    if _s
        max := math.max(_h, max)
        min := math.min(_l, min)
        mid := math.avg(max, min)
        xt := true
        xb := true
        area.set_top(max)
        area.set_rightbottom(bar_index, min)
        if _lb
            label.set_x(_id.lb, int(math.avg(_t, sbT)))
            label.set_y(_id.lb, max)
        if _mml
            _id.lnT.set_y1(max)
            _id.lnT.set_xy2(_t, max)
            _id.lnB.set_y1(min)
            _id.lnB.set_xy2(_t, min)
        if _ml
            _id.lnM.set_y1(mid)
            _id.lnM.set_xy2(_t, mid)
        if _ol 
            _id.lnO.set_x2(_t)
            if _olL
                _id.lbO.set_x(_t)
    if not _s and _le and not _kz
        if _mml
            if xt 
                if _h < _id.lnT.get_y1()
                    _id.lnT.set_x2(_t)
                else 
                    _id.lnT.set_x2(_t)
                    xt := false
            if xb
                if _l > _id.lnB.get_y1()
                    _id.lnB.set_x2(_t)
                else 
                    _id.lnB.set_x2(_t)
                    xb := false
        if _ml
            _id.lnM.set_x2(_t)

method pDWM(DWM _id, _tC, _t, _o, _cl, _lbTX, _olL) =>
    if _tC
        _id.lb.delete()
        _id.ln := line.new(_t, _o, _t, _o, xloc.bar_time, extend.none, color.new(_cl, 0), line.style_dotted, 1)
        if _olL
            _id.lb := label.new(_t, _o, _lbTX + "(" + str.tostring(_o, format.mintick) + ")", xloc.bar_time, yloc.price, color(na), label.style_label_left, color.new(_cl, 0), size.tiny)
    else
        _id.ln.set_x2(_t)
        if _olL
            _id.lb.set_x(_t)
        na

//------------------------------------------------------------------------------
// Calculations - Killzones
//------------------------------------------------------------------------------
kzO = dwmO == 'Killzones'
kz.killzones(nyam and timeframe.isintraday, inKZ, b.o, b.h, b.l, b.c, b.t, nyC, nyST, kzMML, kzML, kzLB, kzLE, kzO, dwmC, dwmL, nyC)
kz.killzones(ldnO and timeframe.isintraday, inKZ, b.o, b.h, b.l, b.c, b.t, ldnOC, ldnOST, kzMML, kzML, kzLB, kzLE, kzO, dwmC, dwmL, ldnOC)
kz.killzones(ldnC and timeframe.isintraday, inKZ, b.o, b.h, b.l, b.c, b.t, ldnCC, ldnCST, kzMML, kzML, kzLB, kzLE, kzO, dwmC, dwmL, ldnCC)
kz.killzones(asian and timeframe.isintraday, inKZ, b.o, b.h, b.l, b.c, b.t, asC, asST, kzMML, kzML, kzLB, kzLE, kzO, dwmC, dwmL, asC)

[xChg, xTxt] = switch dwmO
    "Killzones" => [true, ""]
    "the Day"   => [timeframe.change("D"), "DO"]
    "the Week"  => [timeframe.change("W"), "WO"]
    "the Month" => [timeframe.change("M"), "MO"]
    "None"      => [false, ""]

if not kzO and timeframe.isintraday and tfM <= kzSH
    dwm.pDWM(xChg, b.t, b.o, dwmC, xTxt, dwmL)

bgcolor(dwmS and not kzO and timeframe.isintraday and tfM <= kzSH ? xChg ? dwmC : na : na)



//------------------------------------------------------------------------------
// CANDLES 
//------------------------------------------------------------------------------

// Input para el mínimo tamaño de cuerpo requerido (en puntos)
minCuerpo = input.int(5000, "Mínimo tamaño del cuerpo (puntos)", minval=1)

// Cálculo del cuerpo actual y anterior
cuerpoActual = math.abs(close - open)
cuerpoAnterior = math.abs(close[1] - open[1])

// Condiciones
esAlcista = close > open
cuerpoMayorQueAnterior = cuerpoActual > cuerpoAnterior
superaMinimo = cuerpoActual >= minCuerpo

// Condición principal
condicionAzul = esAlcista and cuerpoMayorQueAnterior and superaMinimo

// Pintar velas
barcolor(condicionAzul ? color.blue : na)




